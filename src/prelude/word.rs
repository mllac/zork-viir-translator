use std::str::FromStr;

use crate::naive_grammer::Word;

impl TryInto<String> for Word {
    type Error = ();

    fn try_into(self) -> Result<String, Self::Error> {
        match self {
            Self::Zorp => Ok("zorp".into()),
            Self::Zork => Ok("zork".into()),
            Self::Worp => Ok("worp".into()),
            Self::Corp => Ok("corp".into()),
            Self::Now => Ok("now".into()),
            Self::Ror => Ok("ror".into()),
            Self::Rio => Ok("rio".into()),
            Self::T => Ok("t".into()),
            Self::Roop => Ok("roop".into()),
            Self::Vlorp => Ok("vlorp".into()),
            Self::Floom => Ok("floom".into()),
            Self::Mow => Ok("mow".into()),
            Self::Wok => Ok("wok".into()),
            Self::Sqock => Ok("sqock".into()),
            Self::Oom => Ok("oom".into()),
            Self::Baak => Ok("baak".into()),
            Self::Yopper => Ok("yopper".into()),
            Self::Wor => Ok("wor".into()),
            Self::Viir => Ok("viir".into()),
            Self::Lovia => Ok("lovia".into()),
            Self::Korop => Ok("korop".into()),
            Self::Wompwomp => Ok("wompwomp".into()),
            Self::Womp => Ok("womp".into()),
            Self::Coor => Ok("coor".into()),
            Self::Yorp => Ok("yorp".into()),
            Self::Eep => Ok("eep".into()),
            Self::Vine => Ok("vine".into()),
            Self::Bloo => Ok("bloo".into()),
            Self::Poropl => Ok("poropl".into()),
            Self::Perpoler => Ok("perpoler".into()),
            Self::Dooleji => Ok("dooleji".into()),
            Self::Cor => Ok("cor".into()),
            Self::Clork => Ok("clork".into()),
            Self::Blork => Ok("blork".into()),
            Self::Koy => Ok("koy".into()),
            Self::Hort => Ok("hort".into()),
            Self::Skoo => Ok("skoo".into()),
            Self::Skorp => Ok("skorp".into()),
            Self::Jake => Ok("jake".into()),
            Self::Bomp => Ok("bomp".into()),
            Self::Yolo => Ok("yolo".into()),
            Self::Choor => Ok("choor".into()),
            Self::Lond => Ok("lond".into()),
            Self::Porson => Ok("porson".into()),
            Self::Sodgo => Ok("sodgo".into()),
            Self::Skoop => Ok("skoop".into()),
            Self::K => Ok("k".into()),
            Self::Yorn => Ok("yorn".into()),
            Self::Yop => Ok("yop".into()),
            Self::George => Ok("george".into()),
            Self::Toop => Ok("toop".into()),
            Self::Ool => Ok("ool".into()),
            Self::Woov => Ok("woov".into()),
            Self::Bog => Ok("bog".into()),
            Self::Cot => Ok("cot".into()),
            Self::Boll => Ok("boll".into()),
            Self::Boil => Ok("boil".into()),
            Self::Shook => Ok("shook".into()),
            Self::Woah => Ok("woah".into()),
            Self::Plonk => Ok("plonk".into()),
            Self::Wower => Ok("wower".into()),
            Self::Porf => Ok("porf".into()),
            Self::Port => Ok("port".into()),
            Self::Mort => Ok("mort".into()),
            Self::Morf => Ok("morf".into()),
            Self::Zorf => Ok("zorf".into()),
            Self::Fi => Ok("fi".into()),
            Self::Yopi => Ok("yopi".into()),
            Self::Tai => Ok("tai".into()),
            Self::Fro => Ok("fro".into()),
            Self::Fo => Ok("fo".into()),
            Self::Fui => Ok("fui".into()),
            Self::Fop => Ok("fop".into()),
            Self::Hmm => Ok("hmm".into()),
            Self::Lor => Ok("lor".into()),
            Self::Tonk => Ok("tonk".into()),
            Self::Por => Ok("por".into()),
            Self::Tirp => Ok("tirp".into()),
            Self::Torp => Ok("torp".into()),
            Self::Tarp => Ok("tarp".into()),
            Self::Tworp => Ok("tworp".into()),
            Self::Vworp => Ok("vworp".into()),
            Self::Torz => Ok("torz".into()),
            Self::Pol => Ok("pol".into()),
            Self::Zol => Ok("zol".into()),
            Self::Porc => Ok("porc".into()),
            Self::Fot => Ok("fot".into()),
            Self::Wolk => Ok("wolk".into()),
            Self::Conk => Ok("conk".into()),
            Self::Holz => Ok("holz".into()),
            Self::Tuch => Ok("tuch".into()),
            Self::Bon => Ok("bon".into()),
            Self::Sorf => Ok("sorf".into()),
            Self::Comf => Ok("comf".into()),
            Self::Oa => Ok("oa".into()),
            Self::Grr => Ok("grr".into()),
            Self::Yoft => Ok("yoft".into()),
            Self::Awaw => Ok("awaw".into()),
            Self::Uwu => Ok("uwu".into()),
            Self::Bron => Ok("bron".into()),
            Self::Koor => Ok("koor".into()),
            Self::Wot => Ok("wot".into()),
            Self::Foor => Ok("foor".into()),
            Self::Dorp => Ok("dorp".into()),
            Self::Voirz => Ok("voirz".into()),
            Self::Wook => Ok("wook".into()),
            Self::Sos => Ok("sos".into()),
            Self::Olp => Ok("olp".into()),
            Self::Zoop => Ok("zoop".into()),
            Self::Blonk => Ok("blonk".into()),
            Self::Nom => Ok("nom".into()),
            Self::Brod => Ok("brod".into()),
            Self::Hoz => Ok("hoz".into()),
            Self::Foch => Ok("foch".into()),
            Self::Ommog => Ok("ommog".into()),
            Self::Zoz => Ok("zoz".into()),
            Self::Po => Ok("po".into()),
            Self::Ni => Ok("ni".into()),
            Self::Vol => Ok("vol".into()),
            Self::Yot => Ok("yot".into()),
            Self::Oot => Ok("oot".into()),
            Self::Blorp => Ok("blorp".into()),
            Self::Som => Ok("som".into()),
            Self::Yiop => Ok("yiop".into()),
            Self::Oomp => Ok("oomp".into()),
            Self::Mop => Ok("mop".into()),
            Self::Yor => Ok("yor".into()),
            Self::Roy => Ok("roy".into()),
            Self::Noy => Ok("noy".into()),
            Self::Ord => Ok("ord".into()),
            Self::Rorp => Ok("rorp".into()),
            Self::Ow => Ok("ow".into()),
            Self::Trop => Ok("trop".into()),
            Self::Goo => Ok("goo".into()),
            Self::Lee => Ok("need".into()),
            Self::Konekshon => Ok("konekshon".into()),
            Self::Woo => Ok("woo".into()),
            _ => Err(()),
        }
    }
}

impl FromStr for Word {
    type Err = ();

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s.to_lowercase().as_str() {
            "yes" => Ok(Self::Zorp),
            "hell" => Ok(Self::Zork),
            "no" => Ok(Self::Worp),
            "bitchass" => Ok(Self::Corp),
            "stick" => Ok(Self::Now),
            "right" => Ok(Self::Ror),
            "left" => Ok(Self::Rio),
            "side" => Ok(Self::T),
            "in" => Ok(Self::Roop),
            "what" => Ok(Self::Vlorp),
            "lot" => Ok(Self::Floom),
            "little" => Ok(Self::Floom),
            "cat" => Ok(Self::Mow),
            "dog" => Ok(Self::Wok),
            "bird" => Ok(Self::Sqock),
            "cow" => Ok(Self::Oom),
            "chicken" => Ok(Self::Baak),
            "person" => Ok(Self::Yopper),
            "human" => Ok(Self::Yopper),
            "country" => Ok(Self::Wor),
            "language" => Ok(Self::Viir),
            "favorite" => Ok(Self::Lovia),
            "alien" => Ok(Self::Korop),
            "too-bad" => Ok(Self::Wompwomp),
            "dang" => Ok(Self::Womp),
            "color" => Ok(Self::Coor),
            "red" => Ok(Self::Yorp),
            "orange" => Ok(Self::Eep),
            "green" => Ok(Self::Vine),
            "blue" => Ok(Self::Bloo),
            "purple" => Ok(Self::Poropl),
            "voilet" => Ok(Self::Perpoler),
            "semi" => Ok(Self::Dooleji),
            "see-through" => Ok(Self::Cor),
            "seethrough" => Ok(Self::Cor),
            "flower" => Ok(Self::Clork),
            "tree" => Ok(Self::Blork),
            "plant" => Ok(Self::Blork),
            "bush" => Ok(Self::Koy),
            "leaf" => Ok(Self::Hort),
            "sky" => Ok(Self::Skoo),
            "cloud" => Ok(Self::Skorp),
            "weather" => Ok(Self::Jake),
            "opacity" => Ok(Self::Bomp),
            "sun" => Ok(Self::Yolo),
            "awesome" => Ok(Self::Choor),
            "lovely" => Ok(Self::Lond),
            "sad" => Ok(Self::Porson),
            "upset" => Ok(Self::Sodgo),
            "angry" => Ok(Self::Skoop),
            "jealous" => Ok(Self::Skoop),
            "jealousy" => Ok(Self::Skoop),
            "cold" => Ok(Self::K),
            "hot" => Ok(Self::Yorn),
            "rain" => Ok(Self::Yop),
            "thuner" => Ok(Self::George),
            "tornado" => Ok(Self::Toop),
            "flood" => Ok(Self::Ool),
            "tsunami" => Ok(Self::Woov),
            "love" => Ok(Self::Bog),
            "like" => Ok(Self::Cot),
            "volcano" => Ok(Self::Boll),
            "eruption" => Ok(Self::Boil),
            "erupt" => Ok(Self::Boil),
            "explode" => Ok(Self::Boil),
            "boom" => Ok(Self::Boil),
            "earthquake" => Ok(Self::Shook),
            "hurricane" => Ok(Self::Woah),
            "wood" => Ok(Self::Plonk),
            "water" => Ok(Self::Wower),
            "she" => Ok(Self::Porf),
            "her" => Ok(Self::Port),
            "him" => Ok(Self::Mort),
            "he" => Ok(Self::Morf),
            "they" => Ok(Self::Zorf),
            "them" => Ok(Self::Zorf),
            "i" => Ok(Self::Fi),
            "im" => Ok(Self::Fi),
            "my" => Ok(Self::Fi),
            "you" => Ok(Self::Yop),
            "your" => Ok(Self::Yopi),
            "thy" => Ok(Self::Tai),
            "are" => Ok(Self::Fro),
            "is" => Ok(Self::Fo),
            "have" => Ok(Self::Fui),
            "ve" => Ok(Self::Fui),
            "been" => Ok(Self::Fui),
            "our" => Ok(Self::Fop),
            "we" => Ok(Self::Fop),
            "hmm" => Ok(Self::Hmm),
            "how" => Ok(Self::Hmm),
            "if" => Ok(Self::Lor),
            "logic" => Ok(Self::Tonk),
            "so" => Ok(Self::Por),
            "this" => Ok(Self::Tirp),
            "then" => Ok(Self::Torp),
            "that" => Ok(Self::Tarp),
            "there" => Ok(Self::Tworp),
            "where" => Ok(Self::Vworp),
            "here" => Ok(Self::Torz),
            "stop" => Ok(Self::Pol),
            "go" => Ok(Self::Zol),
            "continue" => Ok(Self::Porc),
            "will" => Ok(Self::Fot),
            "leg" => Ok(Self::Wolk),
            "arm" => Ok(Self::Conk),
            "hand" => Ok(Self::Holz),
            "finger" => Ok(Self::Tuch),
            "joints" => Ok(Self::Bon),
            "thigh" => Ok(Self::Sorf),
            "chest" => Ok(Self::Comf),
            "stomach" => Ok(Self::Oa),
            "hungry" => Ok(Self::Grr),
            "soft" => Ok(Self::Yoft),
            "rough" => Ok(Self::Awaw),
            "rigid" => Ok(Self::Uwu),
            "smooth" => Ok(Self::Bron),
            "holey" => Ok(Self::Koor),
            "hole-y" => Ok(Self::Koor),
            "confused" => Ok(Self::Wot),
            "fair" => Ok(Self::Foor),
            "dumb" => Ok(Self::Dorp),
            "odd" => Ok(Self::Voirz),
            "crazy" => Ok(Self::Voirz),
            "walk" => Ok(Self::Wook),
            "sit" => Ok(Self::Sos),
            "breathe" => Ok(Self::Olp),
            "look" => Ok(Self::Zoop),
            "blink" => Ok(Self::Blonk),
            "eat" => Ok(Self::Nom),
            "ate" => Ok(Self::Nom),
            "bread" => Ok(Self::Brod),
            "hold" => Ok(Self::Hoz),
            "bring" => Ok(Self::Foch),
            "hesitate" => Ok(Self::Ommog),
            "think" => Ok(Self::Ommog),
            "wonder" => Ok(Self::Ommog),
            "sleep" => Ok(Self::Zoz),
            "rest" => Ok(Self::Zoz),
            "do" => Ok(Self::Po),
            "and" => Ok(Self::Ni),
            "also" => Ok(Self::Ni),
            "pet" => Ok(Self::Vol),
            "own" => Ok(Self::Yot),
            "out" => Ok(Self::Oot),
            "time" => Ok(Self::Blorp),
            "some" => Ok(Self::Som),
            "while" => Ok(Self::Yiop),
            "almost" => Ok(Self::Oomp),
            "name" => Ok(Self::Mop),
            "good" => Ok(Self::Yor),
            "bad" => Ok(Self::Roy),
            "not" => Ok(Self::Noy),
            "word" => Ok(Self::Ord),
            "thing" => Ok(Self::Rorp),
            "oh" => Ok(Self::Ow),
            "die" => Ok(Self::Trop),
            "same" => Ok(Self::Goo),
            "need" => Ok(Self::Lee),
            "connection" => Ok(Self::Konekshon),
            "hey" => Ok(Self::Woo),
            "hi" => Ok(Self::Woo),
            "hello" => Ok(Self::Woo),
            "hai" => Ok(Self::Woo),
            _ => Err(()),
        }
    }
}
